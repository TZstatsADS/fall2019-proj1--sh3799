ifelse(index >= 60000 & index < 100000, "green",
ifelse(index >= 40000 & index < 60000, "blue"))))),
alpha = 0.5, size = 5, shape = 21)+geom_text(aes(label = artist))
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 0.5, size = 5, shape = 21)+geom_text(aes(label = artist))
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 0.5, size = 5, shape = 21)+geom_text(aes(label = artist))+ theme(legend.position = "none")
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+geom_text(aes(label = artist))+ theme(legend.position = "none")
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+geom_text(aes(label = artist),hjust=1.2)+ theme(legend.position = "none")
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+geom_text(aes(label = artist),hjust=1.2, vjust=0.3)+ theme(legend.position = "none")
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+geom_text(aes(label = artist),hjust=1, vjust=0.3)+ theme(legend.position = "none")
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+geom_text(aes(label = artist),hjust=3, vjust=0.3)+ theme(legend.position = "none")
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+
geom_text(aes(label = artist))+
theme(legend.position = "none")
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+
geom_text(aes(label = ifelse(artist %in%  c("eminem", "bone-thugs-n-harmony"), "")),vjust = 0.5)+
theme(legend.position = "none")
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+
geom_text(aes(label = ifelse(artist %in%  c("eminem", "bone-thugs-n-harmony"), artist, "")),vjust = 0.5)+
theme(legend.position = "none")
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+
geom_text(aes(label = ifelse(artist %in%  c("eminem", "bone-thugs-n-harmony"), artist, "")),vjust = 1.5)+
theme(legend.position = "none")
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+
geom_text(aes(label=artist),vjust = 1.5)+
theme(legend.position = "none")
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+
geom_text(aes(label = ifelse(artist %in%  c("eminem", "bone-thugs-n-harmony", "chamillionaire	", "chris-brown", "dj-khaled", "dr-dre", "black-eyed-peas"), artist, "")),vjust = 1.5)+
theme(legend.position = "none")
ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+
geom_text(aes(label = ifelse(artist %in%  c("eminem", "bone-thugs-n-harmony", "chamillionaire	", "chris-brown", "dj-khaled", "dr-dre", "black-eyed-peas"), artist, "")),vjust = 1.5)+
theme(legend.position = "none") +xlab("number of songs")+ylab("lyric count")
hh_artist <- ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+
geom_text(aes(label = ifelse(artist %in%  c("eminem", "bone-thugs-n-harmony", "chamillionaire	", "chris-brown", "dj-khaled", "dr-dre", "black-eyed-peas"), artist, "")),vjust = 1.5)+
theme(legend.position = "none") +xlab("number of songs")+ylab("lyric count")
ggplotly(hh_artist)
grid.arrange(ggplotly(wordcount1), ggplotly(wordcount2),nrow = 2)
wordcount1 <- ggplotly(wordcount1)
wordcount2 <- ggplotly(wordcount2)
wordcount1 <- ggplotly(wordcount1)
wordcount2 <- ggplotly(wordcount2)
grid.arrange(wordcount1, wordcount2,nrow = 2)
wordcount1
wordcount2
wordcount2 <- ggplot(count_genre) +
geom_bar(aes(x = reorder(`genre`, effective_ratio), y = effective_ratio), stat = "identity") + geom_hline(yintercept=mean(effective_ratio), linetype="dashed", color = "red")
wordcount2 <- ggplot(count_genre) +
geom_bar(aes(x = reorder(`genre`, effective_ratio), y = effective_ratio), stat = "identity") + geom_hline(yintercept=mean(count_genre$effective_ratio), linetype="dashed", color = "red")
wordcount2 <- ggplotly(wordcount2)
wordcount2
wordcount2 <- ggplot(count_genre) +
geom_bar(aes(x = reorder(`genre`, effective_ratio), y = effective_ratio), stat = "identity") + geom_hline(yintercept=mean(count_genre$effective_ratio), linetype="dashed", color = "red")+
coord_flip()+xlab("")+ggtitle("ratio of effective lyric in different genre")
wordcount2 <- ggplotly(wordcount2)
wordcount2
wordcount2 <- ggplot(count_genre) +
geom_bar(aes(x = reorder(`genre`, effective_ratio), y = effective_ratio), stat = "identity") + geom_hline(yintercept=mean(count_genre$effective_ratio), linetype="dashed", color = "red")+
coord_flip()+xlab("")+ggtitle("ratio of effective lyric in different genre")
wordcount2 <- ggplotly(wordcount2)
wordcount2
wordcount2 <- ggplot(count_genre) +
geom_bar(aes(x = reorder(`genre`, effective_ratio), y = effective_ratio), stat = "identity") + geom_hline(yintercept=mean(count_genre$effective_ratio), linetype="dashed", color = "red")+
coord_flip()+xlab("")+ggtitle("ratio of effective lyric in different genre")
wordcount2
wordcount1
wordcount2
View(count_genre)
View(count_genre_gather)
View(dt_lyrics)
wordcount2 <- ggplot(count_genre) +
geom_bar(aes(x = reorder(`genre`, effective_ratio), y = effective_ratio), stat = "identity") + geom_hline(yintercept=mean(dt_lyrics$stemcount/dt_lyrics$lyriccount), linetype="dashed", color = "red")+
coord_flip()+xlab("")+ggtitle("ratio of effective lyric in different genre")
wordcount2
load('../output/processed_lyrics.RData') %>% filter(genre != "Not Available")
load('../output/processed_lyrics.RData') %>% dplyr::filter(genre != "Not Available")
class(dt_lyrics$genre)
dt_lyrics <- dt_lyrics%>% filter(genre != "Not Available")
library(tidyverse)
library(devtools)
library(wordcloud2)
library(ngram)
library(gridExtra)
library(plotly)
load('../output/processed_lyrics.RData')
dt_lyrics <- dt_lyrics %>% filter(genre != "Not Available")
dt_lyrics$lyriccount <- sapply(dt_lyrics$lyrics, function(x) wordcount(x, sep = " ", count.function = sum))
dt_lyrics$stemcount <- sapply(dt_lyrics$stemmedwords, function(x) wordcount(x, sep = " ", count.function = sum))
count_genre <-
dt_lyrics %>% group_by(genre) %>% summarise(lyric = mean(lyriccount), stem = mean(stemcount))
count_genre_gather <-
gather(count_genre, key = "type", value = "count", -genre)
wordcount1 <- ggplot(count_genre_gather, aes(
x = count,
y = fct_reorder2(genre, type == "stem", -count),
color = type
)) +
geom_point() + ylab("") + ggtitle("Word count for song lyrics of different genre")
wordcount1 <- ggplotly(wordcount1)
count_genre$effective_ratio <- count_genre$stem / count_genre$lyric
wordcount2 <- ggplot(count_genre) +
geom_bar(aes(x = reorder(`genre`, effective_ratio), y = effective_ratio), stat = "identity") + geom_hline(yintercept=mean(dt_lyrics$stemcount/dt_lyrics$lyriccount), linetype="dashed", color = "red")+
coord_flip()+xlab("")+ggtitle("ratio of effective lyric in different genre")
wordcount2
wordcount1
wordcount1 <- ggplot(count_genre_gather, aes(
x = count,
y = fct_reorder2(genre, type == "stem", -count),
color = type
)) +
geom_point() + ylab("") + ggtitle("Word count for song lyrics of different genre")
wordcount1 <- ggplotly(wordcount1)
mytext=paste("count", count_genre_gather$count, "\n" , "type", count_genre_gather$typesep="")
wordcount1 <- ggplot(count_genre_gather, aes(
x = count,
y = fct_reorder2(genre, type == "stem", -count),
color = type
)) +
geom_point() + ylab("") + ggtitle("Word count for song lyrics of different genre")
mytext <- paste("count", count_genre_gather$count, "\n" , "type", count_genre_gather$typesep="")
wordcount1 <- ggplot(count_genre_gather, aes(
x = count,
y = fct_reorder2(genre, type == "stem", -count),
color = type
)) +
geom_point() + ylab("") + ggtitle("Word count for song lyrics of different genre")
mytext <- paste("count", count_genre_gather$count, "\n" , "type", count_genre_gather$type, sep="")
pp=plotly_build(wordcount1)
style( pp, text=mytext, hoverinfo = "text", traces = c(1, 2) )
wordcount1 <- ggplot(count_genre_gather, aes(
x = count,
y = fct_reorder2(genre, type == "stem", -count),
color = type
)) +
geom_point() + ylab("") + ggtitle("Word count for song lyrics of different genre")
mytext <- paste("count: ", count_genre_gather$count, "\n" , "type: ", count_genre_gather$type, sep="")
pp=plotly_build(wordcount1)
style( pp, text=mytext, hoverinfo = "text", traces = c(1, 2) )
count_genre <-
dt_lyrics %>% group_by(genre) %>% summarise(lyric = mean(lyriccount), stem = mean(stemcount))
count_genre_gather <-
gather(count_genre, key = "type", value = "count", -genre)
wordcount1 <- ggplot(count_genre_gather, aes(
x = count,
y = fct_reorder2(genre, type == "stem", -count),
color = type
)) +
geom_point() + ylab("") + ggtitle("Word count for song lyrics of different genre")
mytext <- paste("count: ", count_genre_gather$count, "\n" , "type: ", count_genre_gather$type, sep="")
wordcount1 <- plotly_build(wordcount1)
style(wordcount1, text=mytext, hoverinfo = "text", traces = c(1, 2) )
count_genre$effective_ratio <- count_genre$stem / count_genre$lyric
wordcount2 <- ggplot(count_genre) +
geom_bar(aes(x = reorder(`genre`, effective_ratio), y = effective_ratio), stat = "identity") + geom_hline(yintercept=mean(dt_lyrics$stemcount/dt_lyrics$lyriccount), linetype="dashed", color = "red")+
coord_flip()+xlab("")+ggtitle("ratio of effective lyric in different genre")
wordcount1
wordcount2
count_genre <-
dt_lyrics %>% group_by(genre) %>% summarise(lyric = mean(lyriccount), stem = mean(stemcount))
count_genre_gather <-
gather(count_genre, key = "type", value = "count", -genre)
wordcount1 <- ggplot(count_genre_gather, aes(
x = count,
y = fct_reorder2(genre, type == "stem", -count),
color = type
)) +
geom_point() + ylab("") + ggtitle("Word count for song lyrics of different genre")
mytext <- paste("count: ", count_genre_gather$count, "\n" , "type: ", count_genre_gather$type, sep="")
wordcount1 <- plotly_build(wordcount1) %>% style(text=mytext, hoverinfo = "text", traces = c(1, 2) )
count_genre$effective_ratio <- count_genre$stem / count_genre$lyric
wordcount2 <- ggplot(count_genre) +
geom_bar(aes(x = reorder(`genre`, effective_ratio), y = effective_ratio), stat = "identity") + geom_hline(yintercept=mean(dt_lyrics$stemcount/dt_lyrics$lyriccount), linetype="dashed", color = "red")+
coord_flip()+xlab("")+ggtitle("ratio of effective lyric in different genre")
wordcount1
wordcount2
View(count_genre_gather)
wordcount1 <- plotly_build(wordcount1) %>% style(text=mytext, hoverinfo = "text")
wordcount1
mytext <- paste("count: ", count_genre_gather$count, "\n" , "type: ", count_genre_gather$type, sep="")
wordcount1 <- plotly_build(wordcount1)
wordcount1
wordcount1 <- ggplot(count_genre_gather, aes(
x = count,
y = fct_reorder2(genre, type == "stem", -count),
color = type
)) +
geom_point() + ylab("") + ggtitle("Word count for song lyrics of different genre")
wordcount1 <- plotly_build(wordcount1)
wordcount1
count_genre_gather <-
gather(count_genre, key = "type", value = "count", -genre) %>% arrange(desc(count))
count_genre_gather <-
gather(count_genre, key = "type", value = "count", -genre) %>% arrange(desc(count))
wordcount1 <- ggplot(count_genre_gather, aes(
x = count,
y = genre,
color = type
)) +
geom_point() + ylab("") + ggtitle("Word count for song lyrics of different genre")
mytext <- paste("count: ", count_genre_gather$count, "\n" , "type: ", count_genre_gather$type, sep="")
wordcount1
count_genre_gather <-
gather(count_genre, key = "type", value = "count", -genre)
count_genre <-
dt_lyrics %>% group_by(genre) %>% summarise(lyric = mean(lyriccount), stem = mean(stemcount))
View(count_genre)
count_genre_gather <-
gather(count_genre, key = "type", value = "count", -genre) %>% arrange(desc(count))
wordcount1 <- ggplot(count_genre_gather, aes(
x = count,
y = genre,
color = type
)) +
geom_point() + ylab("") + ggtitle("Word count for song lyrics of different genre")
wordcount1 <- plotly_build(wordcount1)
wordcount1
ggplotly(wordcount1)
dt_hiphop100 <- dt_hiphop %>% group_by(artist) %>% summarise(lyric_count = mean(lyriccount), n.songs = n()) %>% filter(n.songs >=100) %>% mutate(index = n.songs*lyric_count)
hh_artist <- ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+
geom_text(aes(label = ifelse(artist %in%  c("eminem", "bone-thugs-n-harmony", "chamillionaire	", "chris-brown", "dj-khaled", "dr-dre", "black-eyed-peas"), artist, "")),vjust = 1.5)+
theme(legend.position = "none") +xlab("number of songs")+ylab("lyric count")
ggplotly(hh_artist)
dt_hiphop100 <- dt_hiphop %>% group_by(artist) %>% summarise(lyric_count = mean(lyriccount), n.songs = n()) %>% filter(n.songs >=100) %>% mutate(index = n.songs*lyric_count)
hh_artist <- ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+
geom_text(aes(label = ifelse(artist %in%  c("eminem", "bone-thugs-n-harmony", "chamillionaire	", "chris-brown", "dj-khaled", "dr-dre", "black-eyed-peas"), artist, "")),vjust = 1.5)+
theme(legend.position = "none") +xlab("number of songs")+ylab("lyric count")
mytext=paste("Number of songs: ", dt_hiphop100$n.songs, "\n" , "Lyric count: ", dt_hiphop100$lyric_count)
hh_artist=plotly_build(hh_artist) %>% style(text=mytext, hoverinfo = "text")
hh_artist
mytext=paste("Artist: ", dt_hiphop100$artist, "Number of songs: ", dt_hiphop100$n.songs, "\n" , "Lyric count: ", dt_hiphop100$lyric_count)
hh_artist=plotly_build(hh_artist) %>% style(text=mytext, hoverinfo = "text")
hh_artist
hh_artist <- ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+
theme(legend.position = "none") +xlab("number of songs")+ylab("lyric count")
mytext=paste("Artist: ", dt_hiphop100$artist, "Number of songs: ", dt_hiphop100$n.songs, "\n" , "Lyric count: ", dt_hiphop100$lyric_count)
hh_artist=plotly_build(hh_artist) %>% style(text=mytext, hoverinfo = "text")
hh_artist
mytext=paste("Artist: ", dt_hiphop100$artist, "\n" ,"Number of songs: ", dt_hiphop100$n.songs, "\n" , "Lyric count: ", dt_hiphop100$lyric_count)
hh_artist=plotly_build(hh_artist) %>% style(text=mytext, hoverinfo = "text")
hh_artist
mytext=paste("Artist: ", dt_hiphop100$artist, "\n" , "Number of songs: ", dt_hiphop100$n.songs, "\n" , "Lyric count: ", dt_hiphop100$lyric_count)
hh_artist=plotly_build(hh_artist) %>% style(text=mytext, hoverinfo = "text")
hh_artist
mytext=paste(" Artist: ", dt_hiphop100$artist, "\n" , "Number of songs: ", dt_hiphop100$n.songs, "\n" , "Lyric count: ", dt_hiphop100$lyric_count)
hh_artist=plotly_build(hh_artist) %>% style(text=mytext, hoverinfo = "text")
hh_artist
hh_artist <- ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = ifelse(index >= 300000, "red",
ifelse(index >= 100000 & index < 300000, "yellow",
ifelse(index >= 60000 & index < 100000, "green", "blue")))),
alpha = 1, size = 5, shape = 21)+
theme(legend.position = "none") +xlab("number of songs")+ylab("lyric count")
ggplotly(hh_artist)
hh_artist <- ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = artist),
alpha = 1, size = 5, shape = 21)+
theme(legend.position = "none") +xlab("number of songs")+ylab("lyric count")
ggplotly(hh_artist)
dt_eminem <- dt_lyrics %>% filter(artist=="eminem")
stem_eminem <- strsplit(dt_eminem$stemmedwords, " ") %>% unlist() %>% table() %>% as.data.frame() %>% arrange(desc(Freq))
colnames(stem_eminem) <- c("word","count")
wc_eminem <- wordcloud2(stem_eminem[1:200,],size = 1,color = "random-light")
wc_eminem
colnames(stem_eminem) <- c("word","count")
stem_eminem$frequency <- stem_eminem$count/sum(stem_eminem$count)
early <- c(2002,2003,2004,2005,2006)
mid <- c(2007,2008,2009,2010,2011)
recent <- c(2012,2013,2014,2015,2016)
eminem_early <- dt_eminem %>% filter(year %in% early)
eminem_mid <- dt_eminem %>% filter(year %in% mid)
eminem_recent <- dt_eminem %>% filter(year %in% recent)
stem_eminem_early <- strsplit(eminem_early$stemmedwords, " ") %>% unlist() %>% table() %>% as.data.frame() %>% arrange(desc(Freq))
colnames(stem_eminem_early) <- c("word","count")
stem_eminem_early$frequency <- stem_eminem_early$count/sum(stem_eminem_early$count)
head(stem_eminem_early)
stem_eminem_mid <- strsplit(eminem_mid$stemmedwords, " ") %>% unlist() %>% table() %>% as.data.frame() %>% arrange(desc(Freq))
colnames(stem_eminem_mid) <- c("word","count")
stem_eminem_mid$frequency <- stem_eminem_mid$count/sum(stem_eminem_mid$count)
stem_eminem_recent <- strsplit(eminem_recent$stemmedwords, " ") %>% unlist() %>% table() %>% as.data.frame() %>% arrange(desc(Freq))
colnames(stem_eminem_recent) <- c("word","count")
stem_eminem_recent$frequency <- stem_eminem_recent$count/sum(stem_eminem_recent$count)
eminem_top10 <- as.character(stem_eminem[1:10,]$word)
eminem_top10
eminem_early_top <- filter(stem_eminem_early, word %in% eminem_top10) %>% select(-count)
eminem_mid_top <- filter(stem_eminem_mid, word %in% eminem_top10)%>% select(-count)
eminem_recent_top <- filter(stem_eminem_recent, word %in% eminem_top10)%>% select(-count)
eminem_alltime_top <- stem_eminem[1:10,] %>% select(-count)
eminem_top10_freq <- Reduce(function(x,y) merge(x = x, y = y, by = "word"),
list(eminem_alltime_top, eminem_early_top, eminem_mid_top, eminem_recent_top))
colnames(eminem_top10_freq) <- c("word" ,"frequency.alltime", "frequency.early", "frequency.mid", "frequency.recent")
eminem_top10_freq_gather <- gather(eminem_top10_freq, key = "type", value = "frequency", -word)
eminem_top10_plot <- ggplot(eminem_top10_freq_gather, aes(x = type,y = frequency,fill = type)) +
geom_bar(position = "dodge", stat = "identity") + ylab("") +
facet_wrap( ~word, scales = "free") +
theme(axis.title.x = element_blank(),axis.text.x = element_blank(),axis.ticks.x=element_blank())+
ggtitle("Frequency change of top 10 words used across time")+labs(y="")
eminem_top10_plot
ggplotly(eminem_top10_plot)
View(eminem_top10_freq)
View(eminem_top10_freq_gather)
library(tidytext)
eminem_sentiment <- stem_eminem %>% inner_join(get_sentiments("bing")) %>% group_by(sentiment) %>% top_n(10, frequency)
eminem_sentiment_plot <-
ggplot(eminem_sentiment,
aes(
x = reorder(word, frequency),
y = frequency,
fill = sentiment
)) +
geom_bar(position = "dodge", stat = "identity") + facet_wrap( ~ sentiment, scales = "free") +
coord_flip() + xlab("") + ggtitle("Top 10 words being used to express each sentiments (Eminem)") + theme(legend.position = "none")
hiphop_sentiment <- stem_hiphop %>% inner_join(get_sentiments("bing")) %>% group_by(sentiment) %>% top_n(10, frequency)
hiphop_sentiment_plot <-
ggplot(hiphop_sentiment,
aes(
x = reorder(word, frequency),
y = frequency,
fill = sentiment
)) +
geom_bar(position = "dodge", stat = "identity") + facet_wrap( ~ sentiment, scales = "free") +
coord_flip() + xlab("") + ggtitle("Top 10 words being used to express each sentiments (Hip-Hop)") + theme(legend.position = "none")
stem_all <- strsplit(dt_lyrics$stemmedwords, " ") %>% unlist() %>% table() %>% as.data.frame() %>% arrange(desc(Freq))
colnames(stem_all) <- c("word","count")
stem_all$frequency <- stem_all$count/sum(stem_all$count)
all_sentiment <- stem_all %>% inner_join(get_sentiments("bing")) %>% group_by(sentiment) %>% top_n(10, frequency)
all_sentiment_plot <-
ggplot(all_sentiment,
aes(
x = reorder(word, frequency),
y = frequency,
fill = sentiment
)) +
geom_bar(position = "dodge", stat = "identity") + facet_wrap( ~ sentiment, scales = "free") +
coord_flip() + xlab("") + ggtitle("Top 10 words being used to express each sentiments (All songs)") + theme(legend.position = "none")
grid.arrange(all_sentiment_plot, hiphop_sentiment_plot, eminem_sentiment_plot, nrow=3)
?facet_wrap
eminem_top10_plot <- ggplot(eminem_top10_freq_gather, aes(x = type,y = frequency,fill = type)) +
geom_bar(position = "dodge", stat = "identity") + ylab("") +
facet_wrap( ~word, scales = "free", nrow = 2, ncol = 5) +
theme(axis.title.x = element_blank(),axis.text.x = element_blank(),axis.ticks.x=element_blank())+
ggtitle("Frequency change of top 10 words used across time")+labs(y="")
ggplotly(eminem_top10_plot)
eminem_top10_freq <- Reduce(function(x,y) merge(x = x, y = y, by = "word"),
list(eminem_alltime_top, eminem_early_top, eminem_mid_top, eminem_recent_top))
colnames(eminem_top10_freq) <- c("word" ,"alltime", "early", "mid", "recent")
eminem_top10_freq_gather <- gather(eminem_top10_freq, key = "type", value = "frequency", -word)
eminem_top10_plot <- ggplot(eminem_top10_freq_gather, aes(x = type,y = frequency,fill = type)) +
geom_bar(position = "dodge", stat = "identity") + ylab("") +
facet_wrap( ~word, scales = "free", nrow = 2, ncol = 5) +
theme(axis.title.x = element_blank(),axis.text.x = element_blank(),axis.ticks.x=element_blank())+
ggtitle("Frequency change of top 10 words used across time")+labs(y="")
ggplotly(eminem_top10_plot)
```{r echo=FALSE, message=FALSE, warning=FALSE, fig.width=5}
?facet_wrap
ggplotly(eminem_top10_plot)
eminem_top10_plot <- ggplot(eminem_top10_freq_gather, aes(x = type,y = frequency,fill = type)) +
geom_bar(position = "dodge", stat = "identity") + ylab("") +
facet_wrap( ~word, scales = "free", nrow = 2, ncol = 5) +
theme(axis.title.x = element_blank(),axis.text.x = element_blank(),axis.ticks.x=element_blank())+
ggtitle("Frequency change of top 10 words used across time")+labs(y="")+panel.spacing.y()
eminem_top10_plot <- ggplot(eminem_top10_freq_gather, aes(x = type,y = frequency,fill = type)) +
geom_bar(position = "dodge", stat = "identity") + ylab("") +
facet_wrap( ~word, scales = "free", nrow = 2, ncol = 5) +
theme(axis.title.x = element_blank(),axis.text.x = element_blank(),axis.ticks.x=element_blank())+
ggtitle("Frequency change of top 10 words used across time")+labs(y="")+
theme(panel.spacing.y = unit(4, "mm"))
ggplotly(eminem_top10_plot)
eminem_top10_plot <- ggplot(eminem_top10_freq_gather, aes(x = type,y = frequency,fill = type)) +
geom_bar(position = "dodge", stat = "identity") + ylab("") +
facet_wrap( ~word, scales = "free", nrow = 2, ncol = 5) +
theme(axis.title.x = element_blank(),axis.text.x = element_blank(),axis.ticks.x=element_blank())+
ggtitle("Frequency change of top 10 words used across time")+labs(y="")+
theme(panel.spacing.y = unit(1, "cm"))
ggplotly(eminem_top10_plot)
eminem_top10_plot <- ggplot(eminem_top10_freq_gather, aes(x = type,y = frequency,fill = type)) +
geom_bar(position = "dodge", stat = "identity") + ylab("") +
facet_wrap( ~word, scales = "free", nrow = 2, ncol = 5) +
theme(axis.title.x = element_blank(),axis.text.x = element_blank(),axis.ticks.x=element_blank())+
ggtitle("Frequency change of top 10 words used across time")+labs(y="")+
theme(panel.spacing.x = unit(1, "cm"))
ggplotly(eminem_top10_plot)
eminem_top10_plot <- ggplot(eminem_top10_freq_gather, aes(x = type,y = frequency,fill = type)) +
geom_bar(position = "dodge", stat = "identity") + ylab("") +
facet_wrap( ~word, scales = "free", nrow = 2, ncol = 5) +
theme(axis.title.x = element_blank(),axis.text.x = element_blank(),axis.ticks.x=element_blank())+
ggtitle("Frequency change of top 10 words used across time")+labs(y="")+
theme(panel.spacing.x = unit(1, "cm"), panel.spacing.x = unit(1, "cm"))
eminem_top10_plot <- ggplot(eminem_top10_freq_gather, aes(x = type,y = frequency,fill = type)) +
geom_bar(position = "dodge", stat = "identity") + ylab("") +
facet_wrap( ~word, scales = "free", nrow = 2, ncol = 5) +
theme(axis.title.x = element_blank(),axis.text.x = element_blank(),axis.ticks.x=element_blank())+
ggtitle("Frequency change of top 10 words used across time")+labs(y="")+
theme(panel.spacing.x = unit(1, "cm"), panel.spacing.y = unit(1, "cm"))
ggplotly(eminem_top10_plot)
View(dt_hiphop)
temp <- dt_hiphop %>% group_by(artist) %>% tally()
View(temp)
View(dt_hiphop100)
dt_hiphop100 <- dt_hiphop %>% group_by(artist) %>% summarise(lyric_count = mean(lyriccount), n.songs = n()) %>% filter(n.songs >=100)
hh_artist <- ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = artist),
alpha = 1, size = 5, shape = 21)+
theme(legend.position = "none") +xlab("number of songs")+ylab("lyric count")
ggplotly(hh_artist)
dt_hiphop100 <- dt_hiphop %>% group_by(artist) %>% summarise(lyric_count = mean(lyriccount), n.songs = n()) %>% filter(n.songs >=100)
hh_artist <- ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = artist),
alpha = 1, size = 5, shape = 21)+
theme(legend.position = "none") +xlab("number of songs")+ylab("lyric count")+
ggtitle("Popular Hip-Hop artists")
ggplotly(hh_artist)
hh_artist <- ggplot(dt_hiphop100, aes(x=n.songs, y=lyric_count))+
geom_point(aes(fill = artist),
alpha = 0.7, size = 5, shape = 21)+
theme(legend.position = "none") +xlab("number of songs")+ylab("lyric count")+
ggtitle("Popular Hip-Hop artists")
ggplotly(hh_artist)
sentiment <- grid.arrange(eminem_sentiment_plot, hiphop_sentiment_plot, all_sentiment_plot, nrow=3)
?wordcloud2
wc_hiphop <- wordcloud2(stem_hiphop[1:200,],size = 1,color = "random-light", shuffle = F)
wc_hiphop
wc_hiphop <- wordcloud2(stem_hiphop[1:200,],size = 1,color = "random-dark", shuffle = F)
wc_hiphop
wc_hiphop <- wordcloud2(stem_hiphop[1:200,],size = 1,color = "random-dark", shuffle = F, shape = "eclipse")
wc_hiphop
wc_hiphop <- wordcloud2(stem_hiphop[1:200,],size = 1,color = "random-dark", shuffle = F, shape = "eclipse")
wc_hiphop
wc_hiphop <- wordcloud2(stem_hiphop[1:200,],size = 1,color = "random-dark", shuffle = F, size=0.8)
wc_hiphop
wc_hiphop <- wordcloud2(stem_hiphop[1:200,],size = 1,color = "random-dark", shuffle = F, size=0.8)
wc_hiphop <- wordcloud2(stem_hiphop[1:200,],size = 0.8, color = "random-dark")
wc_hiphop
wc_hiphop <- wordcloud2(stem_hiphop[1:200,],size = 0.6, color = "random-dark")
wc_hiphop
wc_eminem <- wordcloud2(stem_eminem[1:200,],size = 0.6,color = "random-dark")
wc_eminem <- wordcloud2(stem_eminem[1:200,],size = 0.6,color = "random-dark")
wc_eminem
?comparison.cloud
wc_eminem <- wordcloud2(stem_eminem[1:200,],size = 0.6,color = "random-dark", backgroundColor = "grey")
wc_eminem
wc_eminem <- wordcloud2(stem_eminem[1:200,],size = 0.6,color = "random-dark")
wc_eminem
